:mod:`osivalidator.osi_rules_implementations`
=============================================

.. py:module:: osivalidator.osi_rules_implementations

.. autoapi-nested-parse::

   This module contains the implementation of each rule to be used in the
   requirements or in the Doxygen documentation.

   All these rules are bounded into "OSIRulesChecker", so they have access to all
   its attributes and methods.



Module Contents
---------------

.. function:: add_default_rules_to_subfields(message, type_rules)

   Add default rules to fields of message fields (subfields)
       


.. function:: pre_check(func)

   Decorator for rules that need to be checked before knowing that the field
   exists or not


.. function:: repeated_selector(func)

   Decorator for selector-rules that take
       


.. function:: rule_implementation(func)

   Decorator to label rules method implementations
       


.. function:: is_valid(self, field, rule)

   Check if a field message is valid, that is all the inner rules of the
   message in the field are complying.

   :param params: none


.. function:: is_less_than_or_equal_to(self, field, rule)

   Check if a number is under or equal a maximum.

   :param params: the maximum (float)


.. function:: is_less_than(self, field, rule)

   Check if a number is under a maximum.

   :param params: the maximum (float)


.. function:: is_greater_than_or_equal_to(self, field, rule)

   Check if a number is over or equal a minimum.

   :param params: the minimum (float)


.. function:: is_greater_than(self, field, rule)

   Check if a number is over a minimum.

   :param params: the minimum (float)


.. function:: is_equal(self, field, rule)

   Check if a number equals the parameter.

   :param params: the equality to check (float or bool)

   Example:
   ```
   - is_equal: 1
   ```


.. function:: is_different(self, field, rule)

   Check if a number is different from the parameter.

   :param params: the inequality to check (float or bool)

   Example:
   ```
   - is_different: 1
   ```


.. function:: is_global_unique(self, field, rule)

   Register an ID in the OSI ID manager to later perform a ID
   consistency validation.

   Must be set to an Identifier.

   :param params: none


.. function:: refers(self, field, rule)

   Add a reference to another message by ID.

   :param params: Type name of the refered object (string)


.. function:: is_iso_country_code(self, field, rule)

   Check if a string is a ISO country code.

   :param params: none


.. function:: first_element(self, field, rule)

   Check rule for first message of a repeated field.

   :param params: dictionary of rules to be checked for the first message
                  (mapping)


.. function:: last_element(self, field, rule)

   Check rule for last message of a repeated field.

   :param params: dictionary of rules to be checked for the last message
                  (mapping)


.. function:: is_optional(self, field, rule)

   This rule set the is_set one on a "Warning" severity.

   :param params: none


.. function:: is_set(self, field, rule)

   Check if a field is set or if a repeated field has at least one element.

   :param params: none


.. function:: check_if(self, field, rule)

   Evaluate rules if some statements are verified:

   :param params: statements
   :param extra_params: `do_check`: rules to validate if statements are true

   Structure:

   a_field:
   - check_if:
   {params: statements}
   do_check:
   {extra_params: rules to validate if statements are true}


   Example:

   a_field:
   - check_if:
   - is_set: # Statements
   target: parent.environment.temperature
   - another_statement: statement parameter
   do_check: # Check that will be performed only if the statements are True
   - is_less_than_or_equal_to: 0.5
   - is_greater_than_or_equal_to: 0


