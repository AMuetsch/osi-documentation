:mod:`osivalidator.osi_validator_logger`
========================================

.. py:module:: osivalidator.osi_validator_logger

.. autoapi-nested-parse::

   Module which contains OSIValidatorLogger and some logging filters who wrap the
   Python logging module.



Module Contents
---------------

.. function:: log(func)

   Wrapper for logging function


.. py:class:: WarningFilter

   Bases: :class:`logging.Filter`

   Filter for the logger which take INFO and WARNING messages

   
   .. method:: filter(self, record)




.. py:class:: ErrorFilter

   Bases: :class:`logging.Filter`

   Filter for the logger which take INFO and ERROR messages

   
   .. method:: filter(self, record)




.. py:class:: InfoFilter

   Bases: :class:`logging.Filter`

   Filter which only take INFO messages

   
   .. method:: filter(self, record)




.. py:class:: OSIValidatorLogger(debug=False)

   Wrapper for the Python logger

   
   .. method:: init_cli_output(self, verbose)

      Initialize the CLI output



   
   .. method:: init(self, debug, verbose, output_path, files=False)

      Initialize the OSI Validator Logger. Useful to reinit the object.



   
   .. method:: create_database(self, timestamp, output_path)

      Create an SQLite database and set the table for logs



   
   .. method:: init_logging_storage(self, files, output_path)

      Initialize (create or set handler) for the specified logging storage
              



   
   .. method:: _init_logging_to_files(self, timestamp, output_path)



   
   .. method:: debug(self, timestamp, msg, *args, **kwargs)

      Wrapper for python debug logger



   
   .. method:: warning(self, timestamp, msg, *args, **kwargs)

      Wrapper for python warning logger



   
   .. method:: error(self, timestamp, msg, *args, **kwargs)

      Wrapper for python error logger



   
   .. method:: info(self, timestamp, msg, *args, **kwargs)

      Wrapper for python info logger



   
   .. method:: flush(self, log_queue=None, timestamp=None, from_id=None)

      Flush the ouput to the database

      :param log_queue: list of tuple of messages that have to be flushed
      :param timestamp: if not None, only the timestamp given will be flushed
      :param from_id: if None, the timestamp will be in millisecond,
                      otherwhise it will be the id of the timestamp according
                      to the lookup table given in this parameter



   
   .. method:: synthetize_results_from_sqlite(self)

      Aggregate the sqlite log and output a synthetized version of the
      result




.. function:: print_synthesis(title, color, ranges_messages_table)

   Print the (range, messages) table in a nice way, precessed with title and
   the number of messages


.. data:: SEVERITY
   

   

