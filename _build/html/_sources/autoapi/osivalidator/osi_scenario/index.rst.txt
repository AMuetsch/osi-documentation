:mod:`osivalidator.osi_scenario`
================================

.. py:module:: osivalidator.osi_scenario

.. autoapi-nested-parse::

   Module that contain OSIDataContainer class to handle and manager OSI scenarios



Module Contents
---------------

.. data:: SEPARATOR
   :annotation: = $$__$$

   

.. data:: SEPARATOR_LENGTH
   

   

.. data:: BUFFER_SIZE
   :annotation: = 1000000

   

.. function:: get_size_from_file_stream(file_object)

   Return a file size from a file stream given in parameters


.. data:: MESSAGES_TYPE
   

   

.. py:class:: OSIScenario(show_progress=True, path=None, type_name='SensorView')

   This class wrap OSI data. It can import and decode OSI scenarios.

   
   .. method:: from_file(self, path, type_name='SensorView', max_index=-1)

      Import a scenario from a file



   
   .. method:: retrieve_message_offsets(self, max_index)

      Retrieve the offsets of all the messages of the scenario and store them
      in the `message_offsets` attribute of the object

      It returns the number of discovered timesteps



   
   .. method:: get_message_by_index(self, index)

      Get a message by its index. Try first to get it from the cache made
      by the method `cache_messages_in_index_range`.



   
   .. method:: get_messages_in_index_range(self, begin, end)

      Yield an iterator over messages of indexes between begin and end non
      included.



   
   .. method:: cache_messages_in_index_range(self, begin, end)

      Put all messages from index begin to index end in the cache. Then the
      method `get_message_by_index` can access to it in a faster way.

      Using this method again clear the last cache and replace it with a new
      one.



   
   .. method:: update_bar(self, progress_bar, new_index)




